package game;

import java.awt.Polygon;

@SuppressWarnings("serial")
public class SpaceShip extends Polygon {

	private double xVelocity = 0, yVelocity = 0;
	
	int gBWidth = GameBoard.boardWidth;
	int gBHeight = GameBoard.boardHeight;
	
	private double centerX = gBWidth/2, centerY = gBHeight/2;
	
	public static int[] polyXArray  = {-13, 14, -13, -5, -13};
	public static int[] polyYArray = {-15, 0, 15, 0, -15};
	
	private int shipWidth = 27, shipHeight = 30;
	
	private double uLeftXPos = getXCenter()+ this.polyXArray[0];
	private double uLeftYPos = getYCenter()+ this.polyYArray[0];
	
	private double rotationAngle = 0, movingAngle = 0;
	
	public SpaceShip(){
		
		super(polyXArray, polyYArray, 5);
		
	}
	
	public double getXCenter(){return centerX; }
	public double getYCenter(){return centerY; }
	
	public void setXCenter(double xCent){this.centerX = xCent; }
	public void setYCenter(double yCent){this.centerY = yCent; }
	
	public void increaseXPos(double incAmt){ this.centerX += incAmt; }
	public void increaseYPos(double incAmt){ this.centerY += incAmt; }
	
	public double getLeftXPoc(){ return uLeftXPos; }
	public double getLeftYPoc(){ return uLeftYPos; }
	
	public void setULeftXPos(double xULPos){ this.uLeftXPos = xULPos; }
	public void setULeftYPos(double yULPos){ this.uLeftYPos = yULPos; }
	
	public int getShipWidth(){return shipWidth; }
	public int getShipHeight(){ return shipHeight; }
	
	public double getXValocity(){return xVelocity; }
	public double getYValocity(){return yVelocity; }
	
	public void setXValocity(double xVel){this.xVelocity = xVel; }
	public void setYValocity(double yVel){this.yVelocity = yVel; }
	
	public void increaseXValocity(double xVelInc){this.xVelocity += xVelInc; }
	public void increaseYValocity(double yVelInc){this.yVelocity += yVelInc; }
	
	public void decreaseXValocity(double xVelDec){this.xVelocity -= xVelDec; }
	public void decreaseYValocity(double yVelDec){this.yVelocity -= yVelDec; }
	
	public void setMovingAngle(double moveAngle){this.movingAngle = moveAngle; }
	public double getMovingAngle(){return movingAngle; }
	
	public void increaseMovingAngle(double moveAngle){this.movingAngle += moveAngle; }
	
	public double shipXMoveAngle(double xMoveAngle){
		return (double)(Math.cos(xMoveAngle + Math.PI / 180));
	}
	/*
	
	// Upper left hand corner of space ship

	int uLeftXPos = 500, uLeftYPos = 400;

	// Determines the direction the ship moves

	int xDirection = 0;

	int yDirection = 0;

	// Get the board width and height

	int width = GameBoard.boardWidth;

	int height = GameBoard.boardHeight;

	// Will hold the x & y coordinates for the ship

	public static int[] polyXArray = { -13, 14, -13, -5, -13 };

	public static int[] polyYArray = { -15, 0, 15, 0, 15 };
	
	static int rotationAngle = 0;

	// Creates a new space ship

	public SpaceShip() {

		// Creates a Polygon by calling the super or parent class of Rock
		// Polygon

		super(polyXArray, polyYArray, 5);

	}
*/
	/*
	public void move() {
		
		*/
		/*
		 //////////////////////////////////////////////////////////////////////////
		// Get the upper left and top most point for the Polygon

		// This will be dynamic later on

		int uLeftXPos = super.xpoints[0];

		int uLeftYPos = super.ypoints[0];

		// If the ship hits a wall it will go in the opposite direction

		if (uLeftXPos < 0 || (uLeftXPos + 25) > width)
			xDirection = -xDirection;

		if (uLeftYPos < 0 || (uLeftYPos + 50) > height)
			yDirection = -yDirection;

		// Change the values of the points for the Polygon

		for (int i = 0; i < super.xpoints.length; i++) {

			super.xpoints[i] += xDirection;

			super.ypoints[i] += yDirection;

		}
		/////////////////////////////////////////////
 	*/
		/*
		super.xpoints = SpaceShip.polyXArray;
		super.ypoints = SpaceShip.polyYArray;
		
	}
*/
}
